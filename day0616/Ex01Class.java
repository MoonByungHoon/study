package day0616;
//	자바에서 클래스란 프로그램 하나하나를 말한다.
//	하지만 3세대 객체지향적 언어에서는 클래스라고 부를 수 없었다.
//	이유는 클래스에는 반드시 데이터를 저장할 공간과 클래스 변수
//	실행할 수 있는 기능들이 정의가 되어있어야하지만
//	지금까지는 둘 중에 하나만 정의해왔기 떄문이다.

//프로그램을 기능의 집합이라고 생각했던 2세대의 절차 지향적 언어와 다르게
//3세대 객체 지향적 언어에서는 프로그램을 더 작은 프로그램 변수들의 집합으로 본다.

//학생과 관련된 프로그램을 만들게 될 때에 기존에는 학생 구조체를 따로 만들고,
//기능도 따로 만들어 주었지만 해당 클래스 변수, 메소드 등을 정의하고 필요할때마다
//해당 객체를 만들어서 사용할 수 있다.

//클래스는 필드와 메소드로 이뤄져있다.
//필드 : 해당 클래스의 객체들이 가지고 있는 데이터들의 종류
//메소드 : 해당 클래스의 객체들이 실행가능한 기능들.

//생성자(Constructor)란, 객체를 생성할 때에 실행시킬 코드를 모아둔 메소드이다.
//우리가 특별히 생성자를 따로 정의하지 않더라도 자바에서는 기본 형태의 생성자가 호출된다.
//해당 기본 생성자는 기본형 데이터 타입 필드는 0으로
//참조형 데이터 타입 필드는 null로 초기화 해준다.
//생성자는 특이하게 리턴 타입이 아예 없으며, 메소드 이름은 반드시 클래스 이름과 동일해야한다.

//필요에 따라서 직접 생성자를 정의해줄 수 있는데 이때에 주의할 점은
//파라미터 있는 생성자를 만들어주면 더이상 파라미터가 없는 생성자는 사용할 수 없다.


//오버라이드(Override)란 부모 클래스로부터 상속받은 메소드를 자식 클래스에서 재정의 한 것을 말한다.
//단, 오버라이드를 할 때에 주의할 점은 해당 메소드를 선언할 때, 반드시 부모 클래스에 해당 메소드와
//똑같은 형태를 갖추어야한다.

//호출 순위가 매우 중요한데 동일 영역 내에서는 같은 이름의 클래스를 사용할 수 없지만
//필드와 메소드 변수는 서로 다는 개념이기 때문에 같은 이름을 사용할 수 있지만 
//해당 이름의 변수를 호출할 때에는 대상이 속한 영역에서 가장 가까운 즉 대상 명칭이 선언된 메소드 내의 객체를 
//호출하게 된다. 이 때문에 this라는 키워드를 사용하여서 해당 메소드가 속해있는 클래스 내의 변수를 지정해준다.

//접근제어자/접근제한자(Access Modifier)란 필드 혹은 메소드를 외부 클래스가 접근을 할 수 있을지 말지를 정하는 키워드이다.
//public : 패키지 내에 어디서든 접근 가능하다.
//protected : 같은 패키지 내에서는 접근 가능하나 외부 패키지에선 상속관계에서만 접근 가능하다.
//default : 같은 패키지 내에 다른 클래스에서 접근 가능하다.
//(switch에서 사용하는데 우리가 아무런 접근 제한자를 적어주지 않으면 자동으로 디폴트가 걸린다.)
//(같은 패키지 내에서만 접근 가능해서 패키지 접근 제한자라고도 불리지만 package라는 키워드가 이미 사용중이므로 직접 사용 불가하다.)
//private : 같은 클래스 내에서만 접근이 가능하다.

//데이터 캡슐화(은닉)란 기본적으로 직접 만든 클래스의 객체의 세부 내용을 외부에 알리지 않고 숨기는 것이다.
//즉 외부가 사용해야할 내용 외에는 전부 다 직접적인 접근을 막는 것이다.

//getter/setter는 클래스내의 필드가 캡슐화 되어있을때에 접근하는 방법으로써
//여러 개발자들이 공통적으로 사용하다보니 하나의 공식이 되어진 것중 하나이다.

public class Ex01Class {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	    
	}
}
